# -------------------------------------------------------------------
# function ip() # get IP adresses
# {
#     IP=$(/sbin/ifconfig | awk -F "[: ]+" '/inet addr:/ { if ($4 != "127.0.0.1") print $4 }')
#     var=$(printf "%-15s" $IP)
#     echo $IP
# }

function ipaddr1(){
  # IP=$(ip addr show | grep -e "^\s*inet " | grep -v '127.0.0.1' | awk -F' ' '{print $2}' | xargs -n 10)
  IP=$(ip addr show | sed 's/\// /g' | sed -e 's/^\ *//g' | grep -E "^\s*inet " | grep -v '127.0.0.1' | awk -F' ' '{print $2}' | xargs -n 10 | sed 's/ /, /g')
  echo $IP
}

# -------------------------------------------------------------------
function parse_git_dirty {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]]
}

# -------------------------------------------------------------------
function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}

# -------------------------------------------------------------------
function gittotalstash(){
  echo `git stash list | wc -l`
}

# -------------------------------------------------------------------
function gitstashtop(){
  echo `git stash list | awk -F':' 'NR==1 {print $NF}' | cut -c-20`
}

function git-branch-name
{
    echo $(git symbolic-ref HEAD 2>/dev/null | awk -F/ {'print $NF'})
    # echo $(git branch -vv | grep -E '^\*' | awk -F' ' '{print $2 " Tracks " $4}')
}

function branch-tracks
{
  echo $(git branch -vv 2>/dev/null | grep -E '^\*' | awk -F' ' '{print " << "$4}' | tr -d '[]:')
}

function git-dirty {
    st=$(git status 2>/dev/null | tail -n 1)
    if [[ $st != "nothing to commit (working directory clean)" ]]
    then
        echo " (+/-)"
    else
        echo " (✔)"
    fi
}

function git-unpushed {
    brinfo=$(git branch -v | grep git-branch-name)
    if [[ $brinfo =~ ("[ahead "([[:digit:]]*)]) ]]
    then
        echo "(${BASH_REMATCH[2]})"
    fi
}

function gitify {
    status=$(git status 2>/dev/null | tail -n 1)
    if [[ $status == "" ]]
    then
        echo ""
    else
        echo $(git-branch-name)$(git-dirty)$(git-unpushed)
    fi
}

# -------------------------------------------------------------------
# packen: create a compressed backup + date
packen()
{
  tar czvf "$1-$(date +%y%m%d-%H%M%S).tar.gz" "$1"
}

# -------------------------------------------------------------------
# extract: extract of compressed-files
extract()
{
  if [ -f $1 ] ; then
    case $1 in
             *.tar.bz2)   tar xvjf $1     ;;
             *.tar.gz)    tar xvzf $1     ;;
             *.bz2)       bunzip2 $1      ;;
             *.rar)       unrar x $1      ;;
             *.gz)        gunzip $1       ;;
             *.tar)       tar xvf $1      ;;
             *.tbz2)      tar xvjf $1     ;;
             *.tgz)       tar xvzf $1     ;;
             *.zip)       unzip $1        ;;
             *.Z)         uncompress $1   ;;
             *.7z)        7z x $1         ;;
             *)           echo "'$1' cannot be extracted via >extract<" ;;
         esac
  else
    echo "'$1' is not a valid file"
  fi
}

# -------------------------------------------------------------------
# battery_life : Echo the percentage of battery life remaining
battery_life ()
{
  local life=$(acpi -b | cut -d , -f 2)
  # NOTE: the trailing % is stripped
  echo ${life%\%}
}

# -------------------------------------------------------------------
# battery_color: Change console font based on battery life
battery_color ()
{
  local num=$(battery_life)
  local color=""

  if [ $num -gt 25 ]; then
    # 26-100% remaining : GREEN
    color='\033[32m'
  elif [ $num -gt 10 ]; then
    # 11-25% remaining : YELLOW
    color='\033[1;33m'
  else
    # 0-10% remaining : RED
    color='\033[31m'
  fi

  echo -e "${color}"
}

# -------------------------------------------------------------------
# logssh: establish ssh connection + write a logfile
logssh()
{
  ssh $1 | tee sshlog
}

# -------------------------------------------------------------------
# WARNING -> replace: change multiple files at once
replace()
{
  if [ $3 ]; then
    find $1 -type f -exec sed -i 's/$2/$3/g' {} \;
  else
    echo "Missing argument"
  fi
}

# -------------------------------------------------------------------
# calc: Simple calculator
calc()
{
  local result=""
  result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
  #                       └─ default (when `--mathlib` is used) is 20
  #
  if [[ "$result" == *.* ]]; then
    # improve the output for decimal numbers
    printf "$result" |
    sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
        -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
        -e 's/0*$//;s/\.$//'   # remove trailing zeros
  else
    printf "$result"
  fi
  printf "\n"
}

# -------------------------------------------------------------------
# mkd: Create a new directory and enter it
function mkcd() {
  mkdir -p "$@" && cd "$@"
}

# -------------------------------------------------------------------
# cdf: Change working directory to the top-most Finder window location
cdf() # short for `cdfinder`
{
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# -------------------------------------------------------------------
# targz: Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
targz()
{
  local tmpFile="${@%/}.tar"
  local size=0
  local cmd=""

  tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

  size=$(
    stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
    stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
  )

  if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli"
  else
    if hash pigz 2> /dev/null; then
      cmd="pigz"
    else
      cmd="gzip"
    fi
  fi

  echo "Compressing .tar using \`${cmd}\`…"
  "${cmd}" -v "${tmpFile}" || return 1
  [ -f "${tmpFile}" ] && rm "${tmpFile}"
  echo "${tmpFile}.gz created successfully."
}

# -------------------------------------------------------------------
# fs: Determine size of a file or total size of a directory
fs()
{
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi

  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# -------------------------------------------------------------------
# ff: displays all files in the current directory (recursively)
ff()
{
  find . -type f -iname '*'$*'*' -ls
}

# -------------------------------------------------------------------
# fstr: find text in files
fstr()
{
  OPTIND=1
  local case=""
  local usage="fstr: find string in files.
  Usage: fstr [-i] \"pattern\" [\"filename pattern\"] "

  while getopts :it opt
  do
        case "$opt" in
        i) case="-i " ;;
        *) echo "$usage"; return;;
        esac
  done

  shift $(( $OPTIND - 1 ))
  if [ "$#" -lt 1 ]; then
    echo "$usage"
    return
  fi

  find . -type f -name "${2:-*}" -print0 | \
  xargs -0 egrep --color=always -sn ${case} "$1" 2>&- | more
}

# -------------------------------------------------------------------
# file_backup: creating a backup of a file (with date)
file_backup()
{
  for FILE ; do
    [[ -e "$1" ]] && cp "$1" "${1}_$(date +%Y-%m-%d_%H-%M-%S)" || echo "\"$1\" not found." >&2
  done
}

# -------------------------------------------------------------------
# file_information: output information to a file
file_information()
{
  if [ $1 ]; then
    if [ -z $1 ]; then
      echo "$1: not found"
      return
    fi

    echo $1
    ls -l $1
    file $1
    ldd $1
  else
    echo "Missing argument"
  fi
}

# -------------------------------------------------------------------
# dataurl: Create a data URL from a file
dataurl()
{
  local mimeType=$(file -b --mime-type "$1")

  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi

  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# -------------------------------------------------------------------
# gitio: Create a git.io short URL
gitio()
{
  if [ -z "${1}" -o -z "${2}" ]; then
    echo "Usage: \`gitio slug url\`"
    return 1
  fi
  curl -i http://git.io/ -F "url=${2}" -F "code=${1}"
}

# -------------------------------------------------------------------
# server: Start an HTTP server from a directory, optionally specifying the port
server()
{
  local port="${1:-8000}"
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# -------------------------------------------------------------------
# phpserver: Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
phpserver()
{
  local port="${1:-4000}"
  local ip=$(ipconfig getifaddr en1)
  sleep 1 && open "http://${ip}:${port}/" &
  php -S "${ip}:${port}"
}

# -------------------------------------------------------------------
# psgrep: grep a process
psgrep()
{
  if [ ! -z $1 ] ; then
    echo "Grepping for processes matching $1..."
    ps aux | grep $1 | grep -v grep
  else
    echo "!! Need a process-name to grep for"
  fi
}

# -------------------------------------------------------------------
# gz: Compare original and gzipped file size
gz()
{
  local origsize=$(wc -c < "$1")
  local gzipsize=$(gzip -c "$1" | wc -c)
  local ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
  printf "orig: %d bytes\n" "$origsize"
  printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# -------------------------------------------------------------------
# json: Syntax-highlight JSON strings or files
# Usage -> `json '{"foo":42}'` or `echo '{"foo":42}' | json`
json()
{
  if [ -t 0 ]; then # argument
    python -mjson.tool <<< "$*" | pygmentize -l javascript
  else # pipe
    python -mjson.tool | pygmentize -l javascript
  fi
}

# -------------------------------------------------------------------
# digga: All the dig info
digga()
{
  dig +nocmd "$1" any +multiline +noall +answer
}

# -------------------------------------------------------------------
# escape: Escape UTF-8 characters into their 3-byte format
escape()
{
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo # newline
  fi
}

# -------------------------------------------------------------------
# unidecode: Decode \x{ABCD}-style Unicode escape sequences
unidecode()
{
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo # newline
  fi
}

# -------------------------------------------------------------------
# codepoint: Get a character’s Unicode code point
codepoint()
{
  perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo # newline
  fi
}

# -------------------------------------------------------------------
# getcertnames: Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
getcertnames()
{
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified."
    return 1
  fi

  local domain="${1}"
  echo "Testing ${domain}…"
  echo # newline

  local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
    | openssl s_client -connect "${domain}:443" 2>&1);

  if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
    local certText=$(echo "${tmp}" \
      | openssl x509 -text -certopt "no_header, no_serial, no_version, \
      no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux");
      echo "Common Name:"
      echo # newline
      echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//";
      echo # newline
      echo "Subject Alternative Name(s):"
      echo # newline
      echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
        | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
      return 0
  else
    echo "ERROR: Certificate not found.";
    return 1
  fi
}

# -------------------------------------------------------------------
# note: add a note to the ~/notes.txt file
# usage -> `note 'title' 'body'` or `echo 'body' | note`
note()
{
  local title
  local body

  if [ -t 0 ]; then
    title="$1"
    body="$2"
  else
    title=$(cat)
  fi

  echo "Title: ${title} Body: ${body}" >> ~/notes.txt
}

# -------------------------------------------------------------------
# gi: Install Grunt plugins and add them as `devDependencies` to `package.json`
# Usage -> `gi contrib-watch contrib-uglify zopfli`
gi()
{
  npm install --save-dev ${*/#/grunt-}
}

# -------------------------------------------------------------------
# `m`: with no arguments opens the current directory in TextMate, otherwise
# opens the given location
m()
{
  if [ $# -eq 0 ]; then
    mate .
  else
    mate "$@"
  fi
}

# -------------------------------------------------------------------
# `s`: with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
s()
{
  if [ $# -eq 0 ]; then
    subl .
  else
    subl "$@"
  fi
}

# -------------------------------------------------------------------
# `a`: with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
a()
{
  if [ $# -eq 0 ]; then
    atom .
  else
    atom "$@"
  fi
}

# -------------------------------------------------------------------
# `v`: with no arguments opens the current directory in Vim, otherwise opens the
# given location
v()
{
  if [ $# -eq 0 ]; then
    vim .
  else
    vim "$@"
  fi
}

# -------------------------------------------------------------------
# `o`: with no arguments opens current directory, otherwise opens the given
# location
o()
{
  if [ $# -eq 0 ]; then
    open .
  else
    open "$@"
  fi
}

# -------------------------------------------------------------------
# `np`: with an optional argument `patch`/`minor`/`major`/`<version>`
# defaults to `patch`
np()
{
  git pull --rebase && \
  rm -rf node_modules && \
  npm install && \
  npm test && \
  npm version ${1:=patch} && \
  npm publish && \
  git push origin master && \
  git push origin master --tags
}

# -------------------------------------------------------------------
# `tre`: is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre()
{
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

function extract {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
    if [ -f $1 ] ; then
        # NAME=${1%.*}
        # mkdir $NAME && cd $NAME
        case $1 in
          *.tar.bz2)   tar xvjf ../$1    ;;
          *.tar.gz)    tar xvzf ../$1    ;;
          *.tar.xz)    tar xvJf ../$1    ;;
          *.lzma)      unlzma ../$1      ;;
          *.bz2)       bunzip2 ../$1     ;;
          *.rar)       unrar x -ad ../$1 ;;
          *.gz)        gunzip ../$1      ;;
          *.tar)       tar xvf ../$1     ;;
          *.tbz2)      tar xvjf ../$1    ;;
          *.tgz)       tar xvzf ../$1    ;;
          *.zip)       unzip ../$1       ;;
          *.Z)         uncompress ../$1  ;;
          *.7z)        7z x ../$1        ;;
          *.xz)        unxz ../$1        ;;
          *.exe)       cabextract ../$1  ;;
          *)           echo "extract: '$1' - unknown archive method" ;;
        esac
    else
        echo "$1 - file does not exist"
    fi
fi
}


# A shortcut function that simplifies usage of xclip.
# - Accepts input from either stdin (pipe), or params.
# ------------------------------------------------
cb() {
  local _scs_col="\e[0;32m"; local _wrn_col='\e[1;31m'; local _trn_col='\e[0;33m'
  # Check that xclip is installed.
  if ! type xclip > /dev/null 2>&1; then
    echo -e "$_wrn_col""You must have the 'xclip' program installed.\e[0m"
  # Check user is not root (root doesn't have access to user xorg server)
  elif [[ "$USER" == "root" ]]; then
    echo -e "$_wrn_col""Must be regular user (not root) to copy a file to the clipboard.\e[0m"
  else
    # If no tty, data should be available on stdin
    if ! [[ "$( tty )" == /dev/* ]]; then
      input="$(< /dev/stdin)"
    # Else, fetch input from params
    else
      input="$*"
    fi
    if [ -z "$input" ]; then  # If no input, print usage message.
      echo "Copies a string to the clipboard."
      echo "Usage: cb <string>"
      echo "       echo <string> | cb"
    else
      # Copy input to clipboard
      echo -n "$input" | xclip -selection c
      # Truncate text for status
      if [ ${#input} -gt 80 ]; then input="$(echo $input | cut -c1-80)$_trn_col...\e[0m"; fi
      # Print status.
      echo -e "$_scs_col""Copied to clipboard:\e[0m $input"
    fi
  fi
}
# Aliases / functions leveraging the cb() function
# ------------------------------------------------
# Copy contents of a file
function cbf() { cat "$1" | cb; }
